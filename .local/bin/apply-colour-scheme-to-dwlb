#! /usr/bin/sh

if test -z "$1"; then
	theme="current-scheme"
else 
	theme="$1"
fi

echo "Using theme: $theme"

# Get all colours. They're not all used in this script, but we'll get them anyways so we don't have to rewrite
read -d "\n" C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15 <<< $(cat ~/.config/wal/colorschemes/dark/$theme.json | grep color | grep \$ | awk '{print $2}' | cut -c 3-8)

# Assign roles to specific colours
base="$C0"
# note on accent colour selection: C1 seems to be most optimal in most cases;
# if your wallpaper is minimalist, though, it will be subtly but gratingly
# incorrect and you may want to go with C3, which I found to be preferrable
# in nearly of not literaly every case where C1 was not.
accent="$C1"
urgent="$C6"


echo "Setting first backgroundSet to $base..."
for background in "inactive-bg" "middle-bg" "occupied-bg"; do
	echo "    $background...";
	dwlb -set-$background $base
done

echo "Setting second background set to $accent..."
for background in "active-bg" "middle-selected-bg"; do
	echo "    $background..."
	dwlb -set-$background $accent
done

echo "Setting foregrounds to $C7..."
for foreground in "inactive-fg" "occupied-fg" "urgent-fg"; do
	echo "    $foreground...";
	dwlb -set-$foreground $C7
done

# helps with visibility as some PyWal schemes have really light colours
# + just looks nice
echo "Setting active-fg to ffffff..."
dwlb -set-active-fg ffffff

echo "Setting urgent background to $urgent..."
dwlb -set-urgent-bg $urgent


echo "***Finished applying theme***"

